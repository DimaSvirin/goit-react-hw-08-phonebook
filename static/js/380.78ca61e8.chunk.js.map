{"version":3,"file":"static/js/380.78ca61e8.chunk.js","mappings":"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","sources":["components/ContactForm/ContactForm.styled.jsx","redux/contacts/selectors.js","components/ContactForm/ContactForm.jsx","components/ContactList/ContactList.styled.jsx","components/ContactListItem/ContactListItem.styled.jsx","components/ContactListItem/ContactListItem.jsx","components/ContactList/ContactList.jsx","components/Filter/Filter.styled.jsx","components/Filter/Filter.jsx","pages/Contacts.jsx"],"sourcesContent":["import styled from 'styled-components'\n\nexport const Form = styled.form`\n    display: flex;\n    flex-direction: column;\n    margin: 0 auto;\n    padding: 2.5rem;\n    border: 1px solid black;\n    border-radius: 10px;\n    max-width: 200px;\n    gap: 10px;\n    background-color: #fafafa;\n`\n\nexport const Label = styled.label`\n    font-size: .85rem;\n    text-transform: uppercase;\n    color: #272626;\n`\n\nexport const Input = styled.input`\n    background-color: transparent;\n    border-top: 0;\n    border-right: 0;\n    border-left: 0;\n    border-radius: 0;\n    transition: all 250ms linear;\n    :focus {outline:none;\n        border-color: #4f4dca;\n    }\n`\n\nexport const Button = styled.button`\n    cursor: pointer;\n    padding: .5rem 2.5rem;\n    font-size: 16px;\n    font-weight: 600;\n    text-transform: uppercase;\n    color: #fff;\n    background-color: grey;\n    border-radius: 10px;\n    border: none;\n    border-radius: remy(35px);\n    transition: background-color 250ms linear;\n        :focus,\n        :hover {background-color: #4f4dca;}\n\n`","const selectFilter = state => state.contacts.filter;\n\nexport const selectContacts = state => state.contacts.contacts.items;\n\nexport const selectIsLoading = state => state.contacts.contacts.isLoading;\n\nexport const selectError = state => state.contacts.contacts.contacts.error;\n\nexport const selectVisibleContacts = state => {\n  const contacts = selectContacts(state);\n  const filter = selectFilter(state);\n  return contacts.filter(({ name }) => name.toLowerCase().includes(filter));\n};","import { Form, Label, Input, Button } from './ContactForm.styled';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectContacts } from 'redux/contacts/selectors';\nimport { nanoid } from '@reduxjs/toolkit';\nimport { addContact } from 'redux/contacts/operations';\nimport Notiflix from 'notiflix';\n\nexport const ContactForm = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n  \n  const handleSubmit = e => {\n    e.preventDefault();\n\n    const name = e.target.elements.name.value;\n    const number = e.target.elements.number.value;\n\n    if (contacts.find(el => el.name === name)) {\n      Notiflix.Notify.warning('Name \"' + name + '\" is already in contacts');\n      e.target.reset();\n      return;\n    }\n\n    const newContact = {\n      id: nanoid(),\n      name,\n      number,\n    };\n    \n    dispatch(addContact(newContact));\n    e.target.reset();\n  };\n\n  return (\n    <Form onSubmit={handleSubmit}>\n      <Label htmlFor=\"name\">Name </Label>\n      <Input\n        autoComplete='email'\n        id=\"name\"\n        type=\"text\"\n        name=\"name\"\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n        required\n      />\n\n      <Label htmlFor=\"tel\">Number </Label>\n      <Input\n        autoComplete='new-password'\n        id=\"tel\"\n        type=\"tel\"\n        name=\"number\"\n        pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n        title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n        required\n      />\n      <br />\n      <Button type=\"submit\">Add contact</Button>\n    </Form>\n  );\n};","import styled from 'styled-components';\n\nexport const ContactStyle = styled.ul`\n    display: flex;\n    justify-content: center;\n    gap: 12px;\n   \n    flex-wrap: wrap;\n`","import styled from \"styled-components\";\n\nexport const Contact = styled.li`\n    text-align: center;\n    border: 1px solid black;\n    padding: 14px;\n    border-radius: 5px;\n`\n\nexport const DeleteBtn = styled.button`\n    cursor: pointer;\n    padding: .5rem 2.5rem;\n    font-size: 16px;\n    font-weight: 600;\n    text-transform: uppercase;\n    color: #fff;\n    background-color: grey;\n    border-radius: 10px;\n    border: none;\n    border-radius: remy(35px);\n    transition: background-color 250ms linear;\n        :focus,\n        :hover {background-color: red;}\n`\n\nexport const Name = styled.p`\n    font-size: 18px;\n    font-weight: 500;\n`","import PropTypes from 'prop-types';\nimport { Contact, Name,  DeleteBtn } from \"./ContactListItem.styled\";\nimport { useDispatch } from 'react-redux';\nimport { deleteContact } from 'redux/contacts/operations';\n\nexport const ContactItem = ({ name, number, id }) => {\n  const dispatch = useDispatch();\n  const deleteRec = () => {\n    dispatch(deleteContact(id));\n  } \n  return (\n    <Contact>\n      <Name>\n        {name}: {number}\n      </Name>\n      <DeleteBtn onClick={deleteRec}>Delete</DeleteBtn>\n    </Contact>\n  );\n}\n\nContactItem.propTypes = {\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n};","import { ContactStyle } from './ContactList.styled';\nimport { ContactItem } from 'components/ContactListItem/ContactListItem';\nimport { useSelector } from 'react-redux';\nimport { selectVisibleContacts  } from 'redux/contacts/selectors';\n\nexport const ContactList = () => {\n  const visibleContacts = useSelector(selectVisibleContacts);\n\n  return (\n    <ContactStyle>\n      {visibleContacts.map(({ name, id, number }) => (\n        <ContactItem\n          id={id}\n          key={id}\n          number={number}\n          name={name}\n        />\n      ))}\n    </ContactStyle>\n  );\n}\n","import styled from 'styled-components';\n\nexport const SearchWrap = styled.div`\n    margin: 0 auto;\n    max-width: 400px;\n    display: flex;\n    gap: 10px;\n`\n\nexport const Input = styled.input`\n    background-color: transparent;\n    border-top: 0;\n    border-right: 0;\n    border-left: 0;\n    border-radius: 0;\n    :focus {outline:none;\n        border-color: #4f4dca;\n        }\n`\n\nexport const SearchLabel = styled.label`\n    font-size: 20px;\n    font-weight: 500;\n`\n","import { SearchWrap, Input, SearchLabel } from './Filter.styled';\nimport { useDispatch } from 'react-redux';\nimport { setFilter } from 'redux/contacts/filterSlice';\n\n\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n  const handlerChangeFilter = e => {\n    dispatch(setFilter(e.target.value.toLowerCase().trim()))\n  }\n  return (\n    <SearchWrap>\n      <SearchLabel htmlFor=\"filter\">Find contacts by name:</SearchLabel>\n      <Input\n        id=\"filter\"\n        type=\"text\"\n        name=\"filter\"\n        onChange={handlerChangeFilter}\n      />\n    </SearchWrap>\n  );\n}\n\n\n","import MUI from 'components/MUI';\nimport { ContactForm } from 'components/ContactForm/ContactForm';\nimport { ContactList } from 'components/ContactList/ContactList';\nimport { Filter } from 'components/Filter/Filter';\nimport { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchContacts } from 'redux/contacts/operations';\nimport { selectIsLoading } from 'redux/contacts/selectors';\n\nexport default function Contacts() {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <div>\n      {/* <h2>Contacts</h2> */}\n      {/* <ContactForm />\n      <Filter />\n      <ContactList />\n      {isLoading && <p>Loading...</p>} */}\n      <MUI.Box sx={{ flexGrow: 1 }}>\n      <MUI.Grid container spacing={2} columns={16}>\n        <MUI.Grid item xs={5}>\n            <ContactForm />\n            <Filter />\n        </MUI.Grid>\n          <MUI.Grid item xs={8}>\n            <ContactList />\n            {isLoading && <p>Loading...</p>}\n        </MUI.Grid>\n      </MUI.Grid>\n    </MUI.Box>\n      \n    </div>\n  );\n}"],"names":["Form","styled","Label","Input","Button","selectContacts","state","contacts","items","selectIsLoading","isLoading","selectVisibleContacts","filter","selectFilter","name","toLowerCase","includes","ContactForm","dispatch","useDispatch","useSelector","onSubmit","e","preventDefault","target","elements","value","number","find","el","Notiflix","reset","newContact","id","nanoid","addContact","htmlFor","autoComplete","type","pattern","title","required","ContactStyle","Contact","DeleteBtn","Name","ContactItem","onClick","deleteContact","ContactList","visibleContacts","map","SearchWrap","SearchLabel","Filter","onChange","setFilter","trim","Contacts","useEffect","fetchContacts","MUI","sx","flexGrow","container","spacing","columns","item","xs"],"sourceRoot":""}